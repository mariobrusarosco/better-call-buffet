"""Add hashed_password column to users table

Revision ID: 62ff25a5e0de
Revises: c6e5f7084cb1
Create Date: 2025-08-02 20:53:27.191345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '62ff25a5e0de'
down_revision: Union[str, None] = 'c6e5f7084cb1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('balance_points', sa.Column('note', sa.String(), nullable=True))
    op.alter_column('balance_points', 'date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.create_index('ix_balance_points_source_transaction', 'balance_points', ['source_transaction_id'], unique=False)
    op.create_index('ix_balance_points_verified', 'balance_points', ['is_verified'], unique=False)
    op.drop_constraint(op.f('balance_points_credit_card_id_fkey'), 'balance_points', type_='foreignkey')
    op.drop_constraint(op.f('balance_points_account_id_fkey'), 'balance_points', type_='foreignkey')
    op.drop_constraint(op.f('balance_points_user_id_fkey'), 'balance_points', type_='foreignkey')
    op.create_foreign_key(None, 'balance_points', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'balance_points', 'credit_cards', ['credit_card_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'balance_points', 'accounts', ['account_id'], ['id'], ondelete='CASCADE')
    op.drop_column('balance_points', 'metadata')
    op.add_column('credit_cards', sa.Column('last_transaction_id', sa.UUID(), nullable=True))
    op.alter_column('credit_cards', 'last_four_digits',
               existing_type=sa.VARCHAR(length=4),
               nullable=True)
    op.alter_column('credit_cards', 'due_date',
               existing_type=sa.INTEGER(),
               type_=sa.DateTime(),
               nullable=True)
    op.alter_column('credit_cards', 'credit_limit',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=True)
    op.alter_column('credit_cards', 'available_credit',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=True)
    op.alter_column('credit_cards', 'balance_updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_index('ix_credit_cards_balance_updated', 'credit_cards', ['balance_updated_at'], unique=False)
    op.create_index('ix_credit_cards_credit_limit', 'credit_cards', ['credit_limit'], unique=False)
    op.create_index('ix_credit_cards_current_balance', 'credit_cards', ['current_balance'], unique=False)
    op.create_index('ix_credit_cards_deleted', 'credit_cards', ['is_deleted'], unique=False)
    op.create_index('ix_credit_cards_due_date', 'credit_cards', ['due_date'], unique=False)
    op.create_index('ix_credit_cards_last_four', 'credit_cards', ['last_four_digits'], unique=False)
    op.create_unique_constraint('uix_name_broker_account', 'credit_cards', ['name', 'broker_id', 'account_id'])
    op.create_foreign_key(None, 'credit_cards', 'transactions', ['last_transaction_id'], ['id'])
    op.drop_column('credit_cards', 'description')
    op.add_column('invoices', sa.Column('raw_invoice', sa.JSON(), nullable=False))
    op.add_column('invoices', sa.Column('is_paid', sa.Boolean(), nullable=False))
    op.drop_constraint(op.f('invoices_user_id_fkey'), 'invoices', type_='foreignkey')
    op.create_foreign_key(None, 'invoices', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('invoices', 'raw_content')
    op.add_column('statements', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.add_column('statements', sa.Column('total_due', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('min_payment', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('opening_balance', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('closing_balance', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('raw_statement', postgresql.JSON(astext_type=sa.Text()), nullable=False))
    op.add_column('statements', sa.Column('is_processed', sa.Boolean(), nullable=True))
    op.add_column('statements', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.drop_column('statements', 'total_amount')
    op.drop_column('statements', 'processed')
    op.drop_column('statements', 'raw_content')
    op.add_column('transactions', sa.Column('date', sa.DateTime(), nullable=False))
    op.add_column('transactions', sa.Column('movement_type', sa.String(), nullable=False))
    op.add_column('transactions', sa.Column('category', sa.String(), nullable=True))
    op.add_column('transactions', sa.Column('credit_card_id', sa.UUID(), nullable=True))
    op.add_column('transactions', sa.Column('from_account_id', sa.UUID(), nullable=True))
    op.add_column('transactions', sa.Column('to_account_id', sa.UUID(), nullable=True))
    op.add_column('transactions', sa.Column('related_transaction_id', sa.UUID(), nullable=True))
    op.add_column('transactions', sa.Column('broker_id', sa.UUID(), nullable=False))
    op.add_column('transactions', sa.Column('is_paid', sa.Boolean(), nullable=True))
    op.alter_column('transactions', 'balance_impact',
               existing_type=sa.VARCHAR(),
               type_=sa.DECIMAL(precision=15, scale=2),
               nullable=True)
    op.alter_column('transactions', 'account_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(None, 'transactions', 'brokers', ['broker_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'accounts', ['to_account_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'credit_cards', ['credit_card_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'transactions', ['related_transaction_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'accounts', ['from_account_id'], ['id'])
    op.drop_column('transactions', 'is_income')
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'is_verified')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'hashed_password')
    op.add_column('transactions', sa.Column('is_income', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.alter_column('transactions', 'account_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('transactions', 'balance_impact',
               existing_type=sa.DECIMAL(precision=15, scale=2),
               type_=sa.VARCHAR(),
               nullable=False)
    op.drop_column('transactions', 'is_paid')
    op.drop_column('transactions', 'broker_id')
    op.drop_column('transactions', 'related_transaction_id')
    op.drop_column('transactions', 'to_account_id')
    op.drop_column('transactions', 'from_account_id')
    op.drop_column('transactions', 'credit_card_id')
    op.drop_column('transactions', 'category')
    op.drop_column('transactions', 'movement_type')
    op.drop_column('transactions', 'date')
    op.add_column('statements', sa.Column('raw_content', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('statements', sa.Column('processed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('statements', sa.Column('total_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_column('statements', 'is_deleted')
    op.drop_column('statements', 'is_processed')
    op.drop_column('statements', 'raw_statement')
    op.drop_column('statements', 'closing_balance')
    op.drop_column('statements', 'opening_balance')
    op.drop_column('statements', 'min_payment')
    op.drop_column('statements', 'total_due')
    op.drop_column('statements', 'due_date')
    op.add_column('invoices', sa.Column('raw_content', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'invoices', type_='foreignkey')
    op.create_foreign_key(op.f('invoices_user_id_fkey'), 'invoices', 'users', ['user_id'], ['id'])
    op.drop_column('invoices', 'is_paid')
    op.drop_column('invoices', 'raw_invoice')
    op.add_column('credit_cards', sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'credit_cards', type_='foreignkey')
    op.drop_constraint('uix_name_broker_account', 'credit_cards', type_='unique')
    op.drop_index('ix_credit_cards_last_four', table_name='credit_cards')
    op.drop_index('ix_credit_cards_due_date', table_name='credit_cards')
    op.drop_index('ix_credit_cards_deleted', table_name='credit_cards')
    op.drop_index('ix_credit_cards_current_balance', table_name='credit_cards')
    op.drop_index('ix_credit_cards_credit_limit', table_name='credit_cards')
    op.drop_index('ix_credit_cards_balance_updated', table_name='credit_cards')
    op.alter_column('credit_cards', 'balance_updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('credit_cards', 'available_credit',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=False)
    op.alter_column('credit_cards', 'credit_limit',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               nullable=False)
    op.alter_column('credit_cards', 'due_date',
               existing_type=sa.DateTime(),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('credit_cards', 'last_four_digits',
               existing_type=sa.VARCHAR(length=4),
               nullable=False)
    op.drop_column('credit_cards', 'last_transaction_id')
    op.add_column('balance_points', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'balance_points', type_='foreignkey')
    op.drop_constraint(None, 'balance_points', type_='foreignkey')
    op.drop_constraint(None, 'balance_points', type_='foreignkey')
    op.create_foreign_key(op.f('balance_points_user_id_fkey'), 'balance_points', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('balance_points_account_id_fkey'), 'balance_points', 'accounts', ['account_id'], ['id'])
    op.create_foreign_key(op.f('balance_points_credit_card_id_fkey'), 'balance_points', 'credit_cards', ['credit_card_id'], ['id'])
    op.drop_index('ix_balance_points_verified', table_name='balance_points')
    op.drop_index('ix_balance_points_source_transaction', table_name='balance_points')
    op.alter_column('balance_points', 'date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.drop_column('balance_points', 'note')
    # ### end Alembic commands ###

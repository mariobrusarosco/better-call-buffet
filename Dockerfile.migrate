# Database Migration Container - Enterprise Pattern
FROM python:3.11-slim

WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy poetry files
COPY pyproject.toml poetry.lock ./

# Install dependencies (only main, migrations don't need dev tools)
RUN poetry install --only=main --no-root && rm -rf $POETRY_CACHE_DIR

# Copy migration files and necessary code
COPY migrations/ ./migrations/
COPY alembic.ini ./
COPY app/ ./app/

# Create migration script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🔄 Starting database migration process..."\n\
echo "📊 Database URL: ${DATABASE_URL}"\n\
\n\
# Wait for database to be ready\n\
echo "⏳ Waiting for database connection..."\n\
until pg_isready -d "${DATABASE_URL}" 2>/dev/null; do\n\
    echo "Database not ready, waiting 5s..."\n\
    sleep 5\n\
done\n\
\n\
echo "✅ Database connection established"\n\
\n\
# Show current migration status\n\
echo "📋 Current migration status:"\n\
poetry run alembic current || echo "No migrations applied yet"\n\
\n\
# Show pending migrations\n\
echo "📋 Available migrations:"\n\
poetry run alembic heads\n\
\n\
# Run migrations\n\
echo "🚀 Applying migrations..."\n\
poetry run alembic upgrade head\n\
\n\
# Show final status\n\
echo "✅ Migration completed successfully!"\n\
echo "📊 Final migration status:"\n\
poetry run alembic current\n\
' > /app/migrate.sh && chmod +x /app/migrate.sh

# The migration container only runs migrations, then exits
CMD ["/app/migrate.sh"] 
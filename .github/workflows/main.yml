name: Build and Deploy to App Runner

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: better-call-buffet
  AWS_ACCOUNT_ID: 895583929848

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run linters and tests
        run: |
          poetry run black . --check

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      id-token: write # Required for federated login to AWS
      contents: read # Required to checkout the code

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActions-ECR-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Run Database Migrations
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "ðŸ”„ Running database migrations before deployment..."

          # Get DATABASE_URL from AWS Parameter Store (FREE tier service!)
          DATABASE_URL=$(aws ssm get-parameter \
            --name "/better-call-buffet/DATABASE_URL" \
            --region us-east-2 \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)

          docker run --rm \
            -e ENVIRONMENT=production \
            -e AWS_DEFAULT_REGION=us-east-2 \
            -e DATABASE_URL="$DATABASE_URL" \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            /app/scripts/run-migrations.sh

      - name: Deploy to App Runner
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸš€ Deploying to App Runner..."

          # Update the App Runner service with the new image
          aws apprunner update-service \
            --service-arn arn:aws:apprunner:us-east-2:895583929848:service/better-call-buffet-prod/e7b15d55a36a45d98c4cb3be9f38a582 \
            --source-configuration "{
              \"ImageRepository\": {
                \"ImageIdentifier\": \"$ECR_REGISTRY/$ECR_REPOSITORY:latest\",
                \"ImageConfiguration\": {
                  \"Port\": \"8000\",
                  \"RuntimeEnvironmentVariables\": {
                    \"ENVIRONMENT\": \"production\"
                  }
                },
                \"ImageRepositoryType\": \"ECR\"
              },
              \"AutoDeploymentsEnabled\": false
            }" \
            --region ${{ env.AWS_REGION }}
            
          echo "âœ… Deployment initiated successfully"

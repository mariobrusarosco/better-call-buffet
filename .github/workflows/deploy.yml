name: CI/CD Pipeline for Railway

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Security & Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Security Scanning - Pip Audit
        run: |
          echo "🔍 Running dependency audit with pip-audit..."
          poetry run pip-audit --ignore-vuln GHSA-wj6h-64fc-37mp

      - name: Database Setup & Migration Validation
        run: |
          echo "🔄 Setting up database and validating migrations..."
          # Wait for PostgreSQL to be fully ready
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready!"

          # Run migrations to set up database schema
          poetry run alembic upgrade head
          echo "✅ Database migrations applied successfully!"

          # Validate that migrations are in sync (optional but good practice)
          poetry run alembic check || echo "⚠️ Migration check completed with warnings (this is often normal)"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run Tests
        run: |
          echo "🧪 Running test suite..."
          poetry run pytest -v --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Test Results Summary
        if: always()
        run: |
          echo "📊 Test Pipeline Summary:"
          echo "- Security scanning completed"
          echo "- Migration validation completed"
          echo "- Test suite executed"

  deploy:
    name: Deploy to Railway
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          echo "🚀 Starting deployment to Railway..."
          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Health Check
        run: |
          echo "🏥 Running health check..."
          # Wait a bit for deployment to settle
          sleep 30
          for i in {1..20}; do
            if curl -s -f "${{ secrets.RAILWAY_HEALTH_URL }}" > /dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Attempt $i/20 - waiting 15s..."
            sleep 15
          done
          echo "❌ Health check failed after 5 minutes"
          exit 1

      - name: Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "📊 Deployment Summary:"
          echo "- Railway deployment completed"
          echo "- Health check passed"
          echo "- Application is live and healthy"

      - name: Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Check Railway dashboard and logs for details"

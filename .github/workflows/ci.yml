name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"

jobs:
  # 🧹 Code Quality & Security Checks
  lint-and-security:
    name: 🔍 Lint & Security
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 🔄 Load cached dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📚 Install dependencies
        run: poetry install --with dev

      - name: 🎨 Code Formatting (Black)
        run: poetry run black --check .

      - name: 📋 Import Sorting (isort)
        run: poetry run isort --check-only .

      - name: 🛡️ Security Audit (Safety)
        run: |
          poetry add --group dev safety
          poetry run safety check --ignore=70716 --ignore=70715 --ignore=64459 --ignore=64396

      - name: 📊 Dependency Check (pip-audit)
        run: |
          poetry add --group dev pip-audit
          poetry run pip-audit

  # ✅ Code Validation
  validate:
    name: ✅ Validate Code
    runs-on: ubuntu-latest
    needs: lint-and-security

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 🔄 Load cached dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📚 Install dependencies
        run: poetry install --with dev

      - name: 🔍 Validate Import Structure
        run: |
          poetry run python -c "
          try:
              from app.main import app
              from app.db.connection_and_session import get_db_session
              from app.core.config import settings
              print('✅ All core imports successful')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              exit(1)
          "

      - name: 🏗️ Validate Application Structure
        run: |
          poetry run python -c "
          from app.main import app
          print(f'✅ FastAPI app created successfully')
          print(f'📋 Available routes: {len(app.routes)}')
          for route in app.routes:
              if hasattr(route, 'path'):
                  print(f'  - {route.path}')
          "

  # 🐳 Docker Build, Test & Push to ECR
  docker-build-push:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint-and-security, validate]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: |
            better-call-buffet:latest
            ${{ secrets.ECR_REGISTRY }}/better-call-buffet:latest
            ${{ secrets.ECR_REGISTRY }}/better-call-buffet:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          echo "🔍 Available Docker images:"
          docker images | grep better-call-buffet || echo "No better-call-buffet images found"
          echo "🚀 Starting Docker container..."
          CONTAINER_ID=$(docker run --rm -d --name test-app -p 8000:8000 better-call-buffet:latest)
          echo "📋 Container ID: $CONTAINER_ID"

          echo "⏳ Waiting for app to start with retry logic..."
          HEALTH_CHECK_PASSED=false
          for i in {1..12}; do
            echo "🔄 Health check attempt $i/12..."
            if curl -f --silent --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Health check passed on attempt $i!"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "⏳ Attempt $i failed, waiting ${i}s before retry..."
              sleep $i
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health check failed after 12 attempts"
            echo "🔍 Container logs:"
            docker logs test-app
            echo "🔍 Container status:"
            docker ps -a | grep test-app
            docker stop test-app
            exit 1
          fi

          echo "🏥 Final health endpoint test..."
          curl -f http://localhost:8000/health
          echo "🛑 Stopping container..."
          docker stop test-app
          echo "✅ Docker test completed successfully!"

      - name: 🚀 Push to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/better-call-buffet:latest
          docker push ${{ secrets.ECR_REGISTRY }}/better-call-buffet:${{ github.sha }}
          echo "✅ Images pushed to ECR successfully!"

  # 🧪 Docker Build Only (Feature Branches)
  docker-build-only:
    name: 🧪 Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-security, validate]
    if: github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image (Test Only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: better-call-buffet:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          echo "🔍 Available Docker images:"
          docker images | grep better-call-buffet || echo "No better-call-buffet images found"
          echo "🚀 Starting Docker container..."
          CONTAINER_ID=$(docker run --rm -d --name test-app -p 8000:8000 better-call-buffet:test)
          echo "📋 Container ID: $CONTAINER_ID"

          echo "⏳ Waiting for app to start with retry logic..."
          HEALTH_CHECK_PASSED=false
          for i in {1..12}; do
            echo "🔄 Health check attempt $i/12..."
            if curl -f --silent --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Health check passed on attempt $i!"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "⏳ Attempt $i failed, waiting ${i}s before retry..."
              sleep $i
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health check failed after 12 attempts"
            echo "🔍 Container logs:"
            docker logs test-app
            echo "🔍 Container status:"
            docker ps -a | grep test-app
            docker stop test-app
            exit 1
          fi

          echo "🏥 Final health endpoint test..."
          curl -f http://localhost:8000/health
          echo "🛑 Stopping container..."
          docker stop test-app
          echo "✅ Docker build and test successful (no push to ECR)"

  # 🚀 Deploy to AWS App Runner (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-security, validate, docker-build-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to App Runner
        run: |
          # Create or update App Runner service
          aws apprunner create-service \
            --service-name better-call-buffet-prod \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ secrets.ECR_REGISTRY }}/better-call-buffet:latest",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "DATABASE_URL": "${{ secrets.PROD_DATABASE_URL }}",
                    "SECRET_KEY": "${{ secrets.PROD_SECRET_KEY }}",
                    "ALGORITHM": "HS256",
                    "ACCESS_TOKEN_EXPIRE_MINUTES": "30"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AutoDeploymentsEnabled": true
            }' \
            --instance-configuration '{
              "Cpu": "1024",
              "Memory": "2048"
            }' || \
          aws apprunner update-service \
            --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }}

      - name: ✅ Deployment Health Check
        run: |
          # Wait for deployment to complete and verify health
          sleep 60
          HEALTH_URL="${{ secrets.PROD_APP_URL }}/health"
          curl -f $HEALTH_URL || exit 1
          echo "✅ Production deployment successful!"

      - name: 📱 Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🎉 Production deployment completed successfully!"
          else
            echo "❌ Production deployment failed!"
          fi

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 🗑️ Clean up old Docker images
        run: |
          # This would typically clean up old ECR images
          echo "🧹 Cleanup completed"
